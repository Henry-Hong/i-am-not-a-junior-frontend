/* tslint:disable */
/* eslint-disable */
/**
 * Swagger Petstore - OpenAPI 3.0
 * This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about Swagger at [http://swagger.io](http://swagger.io). In the third iteration of the pet store, we\'ve switched to the design first approach! You can now help us improve the API whether it\'s by making changes to the definition itself or to the code. That way, with time, we can improve the API in general, and expose some of the new features in OAS3.  Some useful links: - [The Pet Store repository](https://github.com/swagger-api/swagger-petstore) - [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)
 *
 * The version of the OpenAPI document: 1.0.19
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import { OrderFromJSON, OrderToJSON, } from '../models/index';
/**
 *
 */
export class StoreApi extends runtime.BaseAPI {
    /**
     * For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors
     * Delete purchase order by ID
     */
    async deleteOrderRaw(requestParameters, initOverrides) {
        if (requestParameters['orderId'] == null) {
            throw new runtime.RequiredError('orderId', 'Required parameter "orderId" was null or undefined when calling deleteOrder().');
        }
        const queryParameters = {};
        const headerParameters = {};
        const response = await this.request({
            path: `/store/order/{orderId}`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters['orderId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.VoidApiResponse(response);
    }
    /**
     * For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors
     * Delete purchase order by ID
     */
    async deleteOrder(requestParameters, initOverrides) {
        await this.deleteOrderRaw(requestParameters, initOverrides);
    }
    /**
     * Returns a map of status codes to quantities
     * Returns pet inventories by status
     */
    async getInventoryRaw(initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["api_key"] = await this.configuration.apiKey("api_key"); // api_key authentication
        }
        const response = await this.request({
            path: `/store/inventory`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response);
    }
    /**
     * Returns a map of status codes to quantities
     * Returns pet inventories by status
     */
    async getInventory(initOverrides) {
        const response = await this.getInventoryRaw(initOverrides);
        return await response.value();
    }
    /**
     * For valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions.
     * Find purchase order by ID
     */
    async getOrderByIdRaw(requestParameters, initOverrides) {
        if (requestParameters['orderId'] == null) {
            throw new runtime.RequiredError('orderId', 'Required parameter "orderId" was null or undefined when calling getOrderById().');
        }
        const queryParameters = {};
        const headerParameters = {};
        const response = await this.request({
            path: `/store/order/{orderId}`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters['orderId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => OrderFromJSON(jsonValue));
    }
    /**
     * For valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions.
     * Find purchase order by ID
     */
    async getOrderById(requestParameters, initOverrides) {
        const response = await this.getOrderByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Place a new order in the store
     * Place an order for a pet
     */
    async placeOrderRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        const response = await this.request({
            path: `/store/order`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OrderToJSON(requestParameters['order']),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => OrderFromJSON(jsonValue));
    }
    /**
     * Place a new order in the store
     * Place an order for a pet
     */
    async placeOrder(requestParameters = {}, initOverrides) {
        const response = await this.placeOrderRaw(requestParameters, initOverrides);
        return await response.value();
    }
}
